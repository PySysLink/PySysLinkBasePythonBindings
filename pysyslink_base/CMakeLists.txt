cmake_minimum_required(VERSION 3.15...3.27)
project(pysyslink_base VERSION "0.1.0")


set(CMAKE_CXX_STANDARD 17)

set(CMAKE_BUILD_TYPE "Debug")

include(litgen_cmake/litgen_cmake.cmake)


# Build our example C++ library (PySysLinkBase) that we want to bind to python
add_subdirectory(src/cpp_libraries/PySysLinkBase)



# Case where we build with nanobind

litgen_find_nanobind()

# The python module sources
set(python_module_sources
    _pydef_nanobind/module.cpp                  # The python module entry point
    _pydef_nanobind/nanobind_PySysLinkBase.cpp        # The pybind11 bindings to the library, which are mainly auto-generated by litgen
)

# _pysyslink_base is the native python module that will be built by calling pybind11_add_module
# This will output a dynamic library called for example:
#     _pysyslink_base.cpython-312-darwin.so on macOS
#     _pysyslink_base.cpython-312-x86_64-linux-gnu.so on Linux
#     _pysyslink_base.cp312-win_amd64.pyd on Windows)
nanobind_add_module(_pysyslink_base ${python_module_sources})

target_link_libraries(_pysyslink_base PRIVATE PySysLinkBase spdlog::spdlog Eigen3::Eigen yaml-cpp HighFive ${HDF5_LIBRARIES})

# Call litgen_setup_module to generate the python wrapper around the native module
litgen_setup_module(
    # The C++ library for which we are building bindings
    PySysLinkBase
    # The native python module name
    _pysyslink_base
    # This is the python wrapper around the native module
    pysyslink_base
    # The path where the python module will be copied after build (for editable mode)
    ${CMAKE_CURRENT_SOURCE_DIR}/_stubs
)


    # Provide a tool to debug the python module
#########################################################################
if (NOT SKBUILD AND PROJECT_IS_TOP_LEVEL)
    add_subdirectory(src/pybind_native_debug)
endif()
