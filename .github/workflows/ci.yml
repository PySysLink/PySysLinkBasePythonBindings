name: CI & Package

on:
  push:
    branches: [ '**' ]     
    tags: [ 'v*' ]   
  pull_request:
    branches: [ '**' ]         
  workflow_dispatch:    

jobs:
  build-and-test:
    if: ${{ always() }}  
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true            # pull in your C++ core repo

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install build-essential
          sudo apt-get install libboost-all-dev
          sudo apt-get install rpm
          sudo apt-get install libhdf5-dev


      - name: Build & install PySysLinkBase
        working-directory: pysyslink_base/src/cpp_libraries/PySysLinkBase
        run: |
          mkdir build && cd build
          cmake .. 
          make -j
          sudo make install

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python build tools
        run: |
          python -m pip install --upgrade pip wheel setuptools pytest
          pip install nanobind

      - name: Build wheel
        run: |
          pip wheel ./pysyslink_base -w dist/

    #   - name: Run tests
    #     run: |
    #       pip install dist/*.whl
    #       pytest tests/

  build-wheels:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: build-and-test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install cibuildwheel
        run: pip install cibuildwheel

      - name: CMake version
        run: cmake --version

      - name: Build wheels for all platforms
        run: |
          cibuildwheel pysyslink_base/ --output-dir dist-wheels
      
      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: built-wheels
          path: dist-wheels/*.whl
          retention-days: 30

  publish-pypi:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: build-wheels
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3                

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: built-wheels
          path: dist-wheels 

      - name: Set up Python
        uses: actions/setup-python@v4             
        with:
          python-version: '3.x'

      - name: Install Twine
        run: python -m pip install --upgrade twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__               # The literal string __token__ tells Twine to use an API token
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload --skip-existing dist-wheels/*
